understand what is a promise

do something about document upload in academic information , maybe create a new component\
 (that consists of 3 things reports and two descripion)

add basicsource model to Recognition details component (change the attirbutes in the model because university 
can be recongnized under both sectoins also think about how are you going to save the file as a string or what)

get the data that and fill the interim forms using it so that one can edit or add the new data and 
also see what already data exists on backend

change the request to api everywhere for basic info to go to ${this.apiUrl}/naac/university/${this.universityId}/basic-info

first make apis for all these post and put request made by the subsections

unset areUnsavedChanges in onSaveChanges method only if the response is received , do not unset while there is error

write effecient code in extended profile form

okay nvm , what if I want all subsections to call to all different api but access the same university id which is generated when a person makes the post requests in any of
 the sections,so that all subsequent requests are directed to put request rather that post request for that 

subscribe to formapi service in all subsections to update the data.(do it differently for contact details component)
or do it differently for all subsections

make sure if all the controllers do the work , you want them to , like university resource must not include anything about contact or campus

create all pages of profile section in the pdf

think about how will you get and upload the text data to azure storage and show it in the generated ssr

add validators to all form in frontend

work out how will you save the information written, also think about an alert when a user is trying to change the section or subsection
without saving changes

give correct label names and ids in the html code of all components in extended-profile 

generate pdf using dynamic data for just one university

add spring security

add cookies to determine which university is logged in and thus save the interim data accordingly for a given university    

watch angular course content from angular dynamic components

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
form-api service:
private universityIdSource = new BehaviorSubject<number | null>(null);
  universityId$ = this.universityIdSource.asObservable();

  // Set the universityId after the initial POST
  setUniversityId(id: number) {
    this.universityIdSource.next(id);
  }

  getUniversityId(): number | null {
    return this.universityIdSource.value;
  }
  apiUrl = environment.apiUrl;

  universityId : number = 0;
  private basicInfoModelSource = new BehaviorSubject<any>({});
  basicInfoModel$ = this.basicInfoModelSource.asObservable();

  private academicInfoModelSource = new BehaviorSubject<any>({});
  academicInfoModel$ = this.academicInfoModelSource.asObservable();

  constructor(private http: HttpClient) {}

  setBasicInfoData(data: any) {
    this.basicInfoModelSource.next({ ...this.basicInfoModelSource.value, ...data });
  }

  setAcademicInfoData(data: any) {
    this.academicInfoModelSource.next({ ...this.academicInfoModelSource.value, ...data });
  }


submitBasicInfo() {
  if (this.universityId != 0) {
    return this.http.put(`${this.apiUrl}/naac/basic-info/${this.universityId}`, this.basicInfoModelSource.value)
      .pipe(
        catchError((error) => {
          console.error('Error in PUT request:', error);
          return throwError(() => error);  // Updated usage of throwError
        })
      );
  } else {
    return this.http.post(this.apiUrl + '/naac/basic-info', this.basicInfoModelSource.value).pipe(
      tap((response: any) => {
        this.universityId = response.id;
      }),
      catchError((error) => {
        console.error('Error in POST request:', error);
        return throwError(() => error);  // Updated usage of throwError
      })
    );
  }
}

  // POST or PUT for Contact section based on universityId
  submitContactDetails(data: any, contactId?: number): Observable<any> {
    const universityId = this.getUniversityId();
    if (universityId) {
      if (contactId) {
        // Update existing contact
        return this.http.put(`${this.apiUrl}/university/${universityId}/contacts/${contactId}`, data)
          .pipe(catchError(error => throwError(() => error)));
      } else {
        // Add new contact
        return this.http.post(`${this.apiUrl}/university/${universityId}/contacts`, data)
          .pipe(catchError(error => throwError(() => error)));
      }
    } else {
      return throwError(() => 'University ID not set.');
    }
  }

  // POST or PUT for Campus section based on universityId
  submitCampusDetails(data: any, campusId?: number): Observable<any> {
    const universityId = this.getUniversityId();
    if (universityId) {
      if (campusId) {
        // Update existing campus
        return this.http.put(`${this.apiUrl}/university/${universityId}/campuses/${campusId}`, data)
          .pipe(catchError(error => throwError(() => error)));
      } else {
        // Add new campus
        return this.http.post(`${this.apiUrl}/university/${universityId}/campuses`, data)
          .pipe(catchError(error => throwError(() => error)));
      }
    } else {
      return throwError(() => 'University ID not set.');
    }
  }

  // POST or PUT for Basic Info + Recognition Details
  submitBasicInformation(data: any): Observable<any> {
    const universityId = this.getUniversityId();
    if (universityId) {
      return this.http.put(`${this.apiUrl}/university/${universityId}`, data)
        .pipe(catchError(error => throwError(() => error)));
    } else {
      return this.http.post(`${this.apiUrl}/university`, data).pipe(
        tap((response: any) => this.setUniversityId(response.id)),
        catchError(error => throwError(() => error))
      );
    }
  }
  

  submitAcademicInfo() {
    return this.http.post(this.apiUrl + '/naac/academic-information', this.academicInfoModelSource.value);
  }
++++++++++++++++++++++++++++++++++++++++++++++++++++=

form actions onChages mehtod:
 onSaveChanges() {
    const currentUrl = this.router.url;
  
    if (currentUrl.startsWith('/basic-information')) {
      this.formDataService.submitBasicInfo().subscribe({
        next: response => console.log('Basic Info submitted successfully', response),
        error: error => console.error('Error submitting Basic Info', error)
      });
    } else if (currentUrl.startsWith('/academic-information')) {
      this.formDataService.submitAcademicInfo().subscribe({
        next: response => console.log('Academic Info submitted successfully', response),
        error: error => console.error('Error submitting Academic Info', error)
      });
    } else {
      console.warn('Unrecognized section for submission');
    }
  }

  ++++++++++++++++++++++++++++++++++++++++++++++++++
  updated campus form:
  <div style="max-height: 400px; overflow-y: auto;">
    <form class="form" [formGroup]="form">
      <div formArrayName="campuses">
        <div *ngFor="let campus of campuses.controls; let i = index" [formGroupName]="i" class="replica-group area-location-group">
          <h4>Campus {{ i + 1 }}</h4>
          <div style="grid-column: span 3;">
            <div class="delete-btn" (click)="removeCampus(i)">
              <i class="fas fa-trash"></i> <!-- Font Awesome trash icon -->
            </div>
          </div>
  
          <div class="form-group" style="grid-column: span 2;">
            <label for="campus-type-{{ i }}">Campus Type</label>
            <input type="text" id="campus-type-{{ i }}" formControlName="campusType" placeholder="Text field data">
          </div>
  
          <div class="form-group" style="grid-column: span 2;">
            <label for="location-{{ i }}">Location</label>
            <select id="location-{{ i }}" formControlName="location">
              <option>Urban</option>
              <option>Rural</option>
              <option>Tribal</option>
              <option>Other</option>
            </select>
          </div>
  
          <div class="form-group" style="grid-column: span 4;">
            <label for="address-{{ i }}">Address</label>
            <input type="text" id="address-{{ i }}" formControlName="address" placeholder="Text field data">
          </div>
  
          <div class="form-group">
            <label for="campus-area-{{ i }}">Campus Area in Acres</label>
            <input type="number" id="campus-area-{{ i }}" formControlName="campusArea" placeholder="Numeric field data">
          </div>
  
          <div class="form-group">
            <label for="built-up-area-{{ i }}">Built-up Area in Sq. Mts</label>
            <input type="number" id="built-up-area-{{ i }}" formControlName="builtInArea" placeholder="Numeric field data">
          </div>
  
          <div class="form-group" style="grid-column: span 2;">
            <label for="programmes-offered-{{ i }}">Programmes Offered (Comma Separated)</label>
            <input type="text" id="programmes-offered-{{ i }}" formControlName="programmesOffered" placeholder="Text field data">
          </div>
  
          <div class="form-group" style="grid-column: span 2;">
            <label for="date-establishment-{{ i }}">Date of Establishment</label>
            <input type="date" id="date-establishment-{{ i }}" formControlName="dateOfEstablishment">
          </div>
  
          <div class="form-group" style="grid-column: span 2;">
            <label for="date-recognition-{{ i }}">Date of Recognition by UGC</label>
            <input type="date" id="date-recognition-{{ i }}" formControlName="dateOfRecognition">
          </div>
        </div>
      </div>
  
      <div class="add-button">
        <button type="button" (click)="addCampus()">Add +</button>
      </div>
    </form>
  </div>
  